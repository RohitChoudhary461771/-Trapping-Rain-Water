Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. 
In this case, 6 units of rain water (blue section) are being trapped.


class Solution {
public:
    int trap(vector<int>& height) {
    int n=height.size();
// ðŸ‘‰ T.C O(3n) S.C (2n)
       
    /*    vector<int>leftMax(n,0);
        leftMax[0]=height[0];
     //left max height------------------------------------------  
        for(int i=1;i<n;i++){
            leftMax[i]=max(leftMax[i-1],height[i]);
        }
        vector<int>rightMax(n,0);
        rightMax[n-1]=height[n-1];
       
     //Right max height------------------------------------------
        for(int i=n-2;i>=0;i--){
            rightMax[i]=max(rightMax[i+1],height[i]);
        }
       
        int water=0;
        for(int i=0;i<n;i++){
            water+=min(leftMax[i],rightMax[i])-height[i];
        }*/
//ðŸ‘‰ Two pointer T.C O(n)
    int l=0,r=n-1;
    int lmaxi=0 ,rmaxi=0;
    int res=0;

        while(l<=r){
            if(height[l]<=height[r]){
                if(height[l]>=lmaxi){
                    lmaxi=height[l];
                }
                else{
                    res+=lmaxi-height[l];
                }
                l++;
            }
            else{
                if(height[r]>=rmaxi){
                    rmaxi=height[r];
                }
                else{
                    res+=rmaxi-height[r];
                }
                r--;
            }
        }

        return res;
    }
};
